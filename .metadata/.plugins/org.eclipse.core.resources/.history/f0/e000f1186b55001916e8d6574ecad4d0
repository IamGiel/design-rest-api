package com.beroe.live.datacleansing.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.beroe.live.datacleansing.domain.DataCleansing;
import com.beroe.live.datacleansing.service.DataCleansingService;
import com.beroe.live.datacleansing.web.rest.errors.BadRequestAlertException;
import com.beroe.live.datacleansing.web.rest.util.HeaderUtil;
import com.beroe.live.datacleansing.web.rest.util.PaginationUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing DataCleansing.
 */
@RestController
@RequestMapping("/api")
public class DataCleansingResource {

    private final Logger log = LoggerFactory.getLogger(DataCleansingResource.class);

    private static final String ENTITY_NAME = "dataCleansing";

    private final DataCleansingService dataCleansingService;

    public DataCleansingResource(DataCleansingService dataCleansingService) {
        this.dataCleansingService = dataCleansingService;
    }

    /**
     * POST  /data-cleansings : Create a new dataCleansing.
     *
     * @param dataCleansing the dataCleansing to create
     * @return the ResponseEntity with status 201 (Created) and with body the new dataCleansing, or with status 400 (Bad Request) if the dataCleansing has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/data-cleansings")
    @Timed
    public ResponseEntity<DataCleansing> createDataCleansing(@Valid @RequestBody DataCleansing dataCleansing) throws URISyntaxException {
        log.debug("REST request to save DataCleansing : {}", dataCleansing);
        if (dataCleansing.getId() != null) {
            throw new BadRequestAlertException("A new dataCleansing cannot already have an ID", ENTITY_NAME, "idexists");
        }
        DataCleansing result = dataCleansingService.save(dataCleansing);
        return ResponseEntity.created(new URI("/api/data-cleansings/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /data-cleansings : Updates an existing dataCleansing.
     *
     * @param dataCleansing the dataCleansing to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated dataCleansing,
     * or with status 400 (Bad Request) if the dataCleansing is not valid,
     * or with status 500 (Internal Server Error) if the dataCleansing couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/data-cleansings")
    @Timed
    public ResponseEntity<DataCleansing> updateDataCleansing(@Valid @RequestBody DataCleansing dataCleansing) throws URISyntaxException {
        log.debug("REST request to update DataCleansing : {}", dataCleansing);
        if (dataCleansing.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        DataCleansing result = dataCleansingService.save(dataCleansing);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, dataCleansing.getId().toString()))
            .body(result);
    }

    /**
     * GET  /data-cleansings : get all the dataCleansings.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of dataCleansings in body
     */
    @GetMapping("/data-cleansings")
    @Timed
    public ResponseEntity<List<DataCleansing>> getAllDataCleansings(Pageable pageable) {
        log.debug("REST request to get a page of DataCleansings");
        Page<DataCleansing> page = dataCleansingService.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/data-cleansings");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /data-cleansings/:id : get the "id" dataCleansing.
     *
     * @param id the id of the dataCleansing to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the dataCleansing, or with status 404 (Not Found)
     */
    @GetMapping("/data-cleansings/{id}")
    @Timed
    public ResponseEntity<DataCleansing> getDataCleansing(@PathVariable String id) {
        log.debug("REST request to get DataCleansing : {}", id);
        Optional<DataCleansing> dataCleansing = dataCleansingService.findOne(id);
        return ResponseUtil.wrapOrNotFound(dataCleansing);
    }

    /**
     * DELETE  /data-cleansings/:id : delete the "id" dataCleansing.
     *
     * @param id the id of the dataCleansing to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/data-cleansings/{id}")
    @Timed
    public ResponseEntity<Void> deleteDataCleansing(@PathVariable String id) {
    	System.out.println(">>>>>>>>>>> gel deleting ");
        log.debug("REST request to delete DataCleansing : {}", id);
        dataCleansingService.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id)).build();
    }
}
