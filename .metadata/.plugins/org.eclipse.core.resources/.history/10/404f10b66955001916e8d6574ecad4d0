package com.beroe.live.datacleansing.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.beroe.live.datacleansing.domain.CleansedData;
import com.beroe.live.datacleansing.service.CleansedDataService;
import com.beroe.live.datacleansing.web.rest.errors.BadRequestAlertException;
import com.beroe.live.datacleansing.web.rest.util.HeaderUtil;
import com.beroe.live.datacleansing.web.rest.util.PaginationUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing CleansedData.
 */
@RestController
@RequestMapping("/api")
public class CleansedDataResource {

    private final Logger log = LoggerFactory.getLogger(CleansedDataResource.class);

    private static final String ENTITY_NAME = "cleansedData";

    private final CleansedDataService cleansedDataService;

    public CleansedDataResource(CleansedDataService cleansedDataService) {
        this.cleansedDataService = cleansedDataService;
    }

    /**
     * POST  /cleansed-data : Create a new cleansedData.
     *
     * @param cleansedData the cleansedData to create
     * @return the ResponseEntity with status 201 (Created) and with body the new cleansedData, or with status 400 (Bad Request) if the cleansedData has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/cleansed-data")
    @Timed
    public ResponseEntity<CleansedData> createCleansedData(@Valid @RequestBody CleansedData cleansedData) throws URISyntaxException {
        log.debug("REST request to save CleansedData : {}", cleansedData);
        if (cleansedData.getId() != null) {
            throw new BadRequestAlertException("A new cleansedData cannot already have an ID", ENTITY_NAME, "idexists");
        }
        CleansedData result = cleansedDataService.save(cleansedData);
        return ResponseEntity.created(new URI("/api/cleansed-data/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /cleansed-data : Updates an existing cleansedData.
     *
     * @param cleansedData the cleansedData to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated cleansedData,
     * or with status 400 (Bad Request) if the cleansedData is not valid,
     * or with status 500 (Internal Server Error) if the cleansedData couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/cleansed-data")
    @Timed
    public ResponseEntity<CleansedData> updateCleansedData(@Valid @RequestBody CleansedData cleansedData) throws URISyntaxException {
        log.debug("REST request to update CleansedData : {}", cleansedData);
        if (cleansedData.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        CleansedData result = cleansedDataService.save(cleansedData);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, cleansedData.getId().toString()))
            .body(result);
    }

    /**
     * GET  /cleansed-data : get all the cleansedData.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of cleansedData in body
     */
    @GetMapping("/cleansed-data")
    @Timed
    public ResponseEntity<List<CleansedData>> getAllCleansedData(Pageable pageable) {
        log.debug("REST request to get a page of CleansedData");
        Page<CleansedData> page = cleansedDataService.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/cleansed-data");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /cleansed-data/:id : get the "id" cleansedData.
     *
     * @param id the id of the cleansedData to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the cleansedData, or with status 404 (Not Found)
     */
    @GetMapping("/cleansed-data/{id}")
    @Timed
    public ResponseEntity<CleansedData> getCleansedData(@PathVariable String id) {
        log.debug("REST request to get CleansedData : {}", id);
        Optional<CleansedData> cleansedData = cleansedDataService.findOne(id);
        return ResponseUtil.wrapOrNotFound(cleansedData);
    }

    /**
     * DELETE  /cleansed-data/:id : delete the "id" cleansedData.
     *
     * @param id the id of the cleansedData to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/cleansed-data/{id}")
    @Timed
    public ResponseEntity<Void> deleteCleansedData(@PathVariable String id) {
        log.debug("REST request to delete CleansedData : {}", id);
        cleansedDataService.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id)).build();
    }
}
