package com.beroe.live.datacleansing.service;

import com.beroe.live.datacleansing.domain.CleansedData;
import com.beroe.live.datacleansing.repository.CleansedDataRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;


import java.util.Optional;
/**
 * Service Implementation for managing CleansedData.
 */
@Service
public class CleansedDataService {

    private final Logger log = LoggerFactory.getLogger(CleansedDataService.class);

    private final CleansedDataRepository cleansedDataRepository;

    public CleansedDataService(CleansedDataRepository cleansedDataRepository) {
        this.cleansedDataRepository = cleansedDataRepository;
    }

    /**
     * Save a cleansedData.
     *
     * @param cleansedData the entity to save
     * @return the persisted entity
     */
    public CleansedData save(CleansedData cleansedData) {
        log.debug("Request to save CleansedData : {}", cleansedData);        return cleansedDataRepository.save(cleansedData);
    }

    /**
     * Get all the cleansedData.
     *
     * @param pageable the pagination information
     * @return the list of entities
     */
    public Page<CleansedData> findAll(Pageable pageable) {
        log.debug("Request to get all CleansedData");
        return cleansedDataRepository.findAll(pageable);
    }


    /**
     * Get one cleansedData by id.
     *
     * @param id the id of the entity
     * @return the entity
     */
    public Optional<CleansedData> findOne(String id) {
        log.debug("Request to get CleansedData : {}", id);
        return cleansedDataRepository.findById(id);
    }

    /**
     * Delete the cleansedData by id.
     *
     * @param id the id of the entity
     */
    public void delete(String id) {
        log.debug("Request to delete CleansedData : {}", id);
        cleansedDataRepository.deleteById(id);
    }
}
